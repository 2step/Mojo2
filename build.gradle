buildscript {
    apply from: "gradle/dependencies.gradle"

    repositories {
      mavenCentral()
      }
}
// --------------------------------------------------------------
// plugins
// --------------------------------------------------------------
plugins {
    id 'java'
    id 'idea'
    id 'application'

    // this enables lombok
    id 'io.freefair.lombok' version '5.0.0-rc4'

    // Integration test plugin
    id "com.coditory.integration-test" version "1.1.11"

    // provides detailed test reports
    // This plugin seems to hide the output of integrationTests or, at least,
    // not make the results of integrationTests obvious.
    // id "com.monnage.test-report" version "1.4"
    
    // creates a 'fat-jar' (one-jar)
    id "com.github.johnrengelman.shadow" version "6.1.0"

    id "org.sonarqube" version "3.0"
}

// --------------------------------------------------------------
// basics
// --------------------------------------------------------------
group 'mmm.coffee.mojo'
version '0.0.1'




allprojects {
  repositories {
    mavenCentral()
    }

  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  configurations.all {
      // See https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
      resolutionStrategy {
          // fail fast on version conflicts (including transitive dependencies)
          // failOnVersionConflict()

          // auto-force our explicit dependencies
          // libs.each { k, v -> force(v) }

          // cache dynamic versions for 10 minutes
          cacheDynamicVersionsFor 10*60, 'seconds'
          // don't cache changing modules at all
          cacheChangingModulesFor 0, 'seconds'
      }
  }
}

// --------------------------------------------------------------
// Sub-projects
// --------------------------------------------------------------
subprojects {
}

// --------------------------------------------------------------
// Make all tests use JUnit5
// --------------------------------------------------------------
tasks.withType(Test) {
    useJUnitPlatform()
    testLogging { events "passed", "skipped", "failed" }
}

// --------------------------------------------------------------
// ensure JUnit5 is used
// --------------------------------------------------------------
test {
    useJUnitPlatform()
}

// --------------------------------------------------------------
// Lint options (defaulting to extreme verbosity)
// --------------------------------------------------------------
compileJava.options*.compilerArgs = [
        "-Xlint:serial",    "-Xlint:varargs",     "-Xlint:cast",        "-Xlint:classfile",
        "-Xlint:dep-ann",   "-Xlint:divzero",     "-Xlint:empty",       "-Xlint:finally",
        "-Xlint:overrides", "-Xlint:path",        "-Xlint:-processing", "-Xlint:static",
        "-Xlint:try",       "-Xlint:fallthrough", "-Xlint:rawtypes",    "-Xlint:deprecation",
        "-Xlint:unchecked", "-Xlint:-options"
        ]

compileTestJava.options*.compilerArgs = [
        "-Xlint:serial",     "-Xlint:varargs",      "-Xlint:cast",        "-Xlint:classfile",
        "-Xlint:dep-ann",    "-Xlint:divzero",      "-Xlint:empty",       "-Xlint:finally",
        "-Xlint:overrides",  "-Xlint:path",         "-Xlint:-processing", "-Xlint:static",
        "-Xlint:try",        "-Xlint:-fallthrough", "-Xlint:-rawtypes",   "-Xlint:-deprecation",
        "-Xlint:-unchecked", "-Xlint:-options"
        ]


